}else{                           # if the blood sample is infected
sum = sum+k
}
}
return(sum)
}
ks <- factorize(n)   # generate possible factors of n
min= n
for(k in ks){
print(k)
pieces = n/k     # calculate number of groups based on k
group = rep(1:pieces,each=k) # factors for sample split
count = c()      # vector to contain all intermediate result
for (l in 1:iterations){
sample <- rbinom(n,1,ratio)   # generate random samples
sample_splits <- split(sample,group) # split sample
count = c(count, calculate_times(sample_splits,k)) # calculate number of trails
}
if(median(count)<n){
min = median(count)
min_k = k
}
}
# k=128
# pieces = n/k
# group = rep(1:pieces,each=2)
# sample <- rbinom(n,1,ratio)
# sample_splits <- split(sample,group)
min_k
min= n
output_k = c()
output_trial = c()
for(k in ks){
print(k)
pieces = n/k     # calculate number of groups based on k
group = rep(1:pieces,each=k) # factors for sample split
count = c()      # vector to contain all intermediate result
for (l in 1:iterations){
sample <- rbinom(n,1,ratio)   # generate random samples
sample_splits <- split(sample,group) # split sample
count = c(count, calculate_times(sample_splits,k)) # calculate number of trails
}
if(median(count)<n){   # median
min = median(count)
min_k = k
}
output_k <- c(output_k,k)
output_trial <- c(output_trial,median(count))
}
output_k
output_trial
library(ggplot2)
g <- ggplot()+geom_line(aes(x=output_k,y=output_trial))
g
g <- ggplot()+geom_line(aes(x=as.factor(output_k),y=output_trial))
g
g <- ggplot()+geom_line(aes(x=as.factor(output_k),y=output_trial,group=1))
g
min_k
library(ggplot2)
n = 12800            # number of donations
ratio = 0.011        # estimate infection rate
iterations = 100     # number of trial for each possible k
# this function calculates integer factors of a number
factorize <- function(x) {
x <- as.integer(x)
div <- seq_len(abs(x))
factors <- div[x %% div == 0L]
return(factors)
}
# this function calculates
calculate_times <- function(list,k){
sum = 0
for (i in 1:length(list)){
if(sum(unlist(list[i]))==0){     # if the blood sample passes test
sum = sum+1
}else{                           # if the blood sample is infected
sum = sum+k
}
}
return(sum)
}
ks <- factorize(n)   # generate possible factors of n
min= n
output_k = c()
output_trial = c()
for(k in ks){
print(k)
pieces = n/k     # calculate number of groups based on k
group = rep(1:pieces,each=k) # factors for sample split
count = c()      # vector to contain all intermediate result
for (l in 1:iterations){
sample <- rbinom(n,1,ratio)   # generate random samples
sample_splits <- split(sample,group) # split sample
count = c(count, calculate_times(sample_splits,k)) # calculate number of trails
}
if(median(count)<min){   # median
min = median(count)
min_k = k
}
output_k <- c(output_k,k)
output_trial <- c(output_trial,median(count))
}
# plot number of trials for different possible value of k
# notice x-axis as k -(number of people in each group) is factorized to make plot proportional
g <- ggplot()+geom_line(aes(x=as.factor(output_k),y=output_trial,group=1))
g
# k=128
# pieces = n/k
# group = rep(1:pieces,each=2)
# sample <- rbinom(n,1,ratio)
# sample_splits <- split(sample,group)
min_k
# plot number of trials for different possible value of k
# notice x-axis as k -(number of people in each group) is factorized to make plot proportional
g <- ggplot()+geom_line(aes(x=as.factor(output_k),y=output_trial,group=1))
g <- g+xlab("number of people in each testing group")+ylab("number of trails needed")
g
library(ggplot2)
center1 <- c(1,1)
center2 <- c(2,3)
center3 <- c(3,0)
sd = 0.2
generate_point<- function(p){
new_x = rnorm(1,mean = p[1],sd = sd)
new_y = rnorm(1,mean = p[2],sd = sd)
return(c(new_x,new_y))
}
g <- ggplot()
generate_group <- function(c,n=100,group_id,ggplot){
i=1
df_p = data.frame()
while (i <=n){
new_point <- generate_point(c)
ggplot <- g+geom_point(data = as.data.frame(new_point), aes(x = new_point[1], y= new_point[2]))
df_p <- rbind(df_p,new_point)
i=i+1
}
df_p['id'] <- group_id
names(df_p) <- c('x','y')
return(df_p)
}
group1 <- generate_group(center1,group_id = 1)
group2 <- generate_group(center2,group_id = 2)
groups <- rbind(group1,group2)
names(groups) <- c('x','y','id')
groups$id = as.factor(groups$id)
centers <- list(center1, center2, center3)
new_g <- ggplot() + theme_bw()+theme(line = element_blank(),
text = element_blank(),
line = element_blank(),
title = element_blank())
new_g
g <- ggplot()
generate_group <- function(c,n=100,group_id,ggplot){
i=1
df_p = data.frame()
while (i <=n){
new_point <- generate_point(c)
ggplot <- g+geom_point(data = as.data.frame(new_point), aes(x = new_point[1], y= new_point[2]))
df_p <- rbind(df_p,new_point)
i=i+1
}
df_p['id'] <- group_id
names(df_p) <- c('x','y')
return(df_p)
}
group1 <- generate_group(center1,group_id = 1,g)
group2 <- generate_group(center2,group_id = 2,g)
g <- ggplot()
generate_group <- function(c,n=100,group_id, ggplot){
i=1
df_p = data.frame()
while (i <=n){
new_point <- generate_point(c)
ggplot <- ggplot+geom_point(data = as.data.frame(new_point), aes(x = new_point[1], y= new_point[2]))
df_p <- rbind(df_p,new_point)
i=i+1
}
df_p['id'] <- group_id
names(df_p) <- c('x','y')
return(df_p)
}
group1 <- generate_group(center1,group_id = 1,g)
group2 <- generate_group(center2,group_id = 2,g)
g <- ggplot()
generate_group <- function(c,n=100,group_id){
i=1
df_p = data.frame()
while (i <=n){
new_point <- generate_point(c)
g <- g+geom_point(data = as.data.frame(new_point), aes(x = new_point[1], y= new_point[2]))
df_p <- rbind(df_p,new_point)
i=i+1
}
df_p['id'] <- group_id
names(df_p) <- c('x','y')
return(df_p)
}
group1 <- generate_group(center1,group_id = 1)
group2 <- generate_group(center2,group_id = 2)
g
g <- ggplot()+geom_point(aes(x = groups$x,y=groups$y,color=groups$id))
g
group1 <- generate_group(center1,group_id = 1)
group2 <- generate_group(center2,group_id = 2)
group3 <- generate_group(center3,group_id = 3)
groups <- rbind(group1,group2,group3)
names(groups) <- c('x','y','id')
groups$id = as.factor(groups$id)
g <- ggplot()+geom_point(aes(x = groups$x,y=groups$y,color=groups$id))
g <- ggplot()+geom_point(aes(x = groups$x,y=groups$y,color=groups$id))
g
df1 <- rbind(generate_point(center1),generate_point(center2),generate_point(center3))
df2 <- rbind(generate_point(center1),generate_point(center2),generate_point(center3))
df1
df2
df1[2]
df1[2,]
sqrt(2)
p1
p1_i <- df1[i,]
p1_j <- df1[j,]
p2_i <- df2[i,]
p2_j <- df2[j,]
i=1
j=2
p1_i <- df1[i,]
p1_j <- df1[j,]
p2_i <- df2[i,]
p2_j <- df2[j,]
p1_i
calculate_p_distance(p1_i,p1_j)
calculate_p_distance <- function(p1,p2){
dist = sqrt((p1[1]^2-p2[1])^2+(p1[2]^2+p2[2]^2))
return(dist)
}
calculate_p_distance(p1_i,p1_j)
!TRUE
abs(-1)
best_n = n
best_n
avg(c(1,2))
mean(c(1,2))
best_n = n
optimal_k = c()
df = data.frame()
# second approach iterations over different k
for (i in 1:iterations){
print(i)
sample <- rbinom(n,1,ratio)   # generate random samples
count = c()      # vector to contain all intermediate result
for(k in ks){
pieces = n/k     # calculate number of groups based on k
group = rep(1:pieces,each=k) # factors for sample split
sample_splits <- split(sample,group) # split sample
count = c(count, calculate_times(sample_splits,k))
}
df <- rbind(df,count)
}
df
head(df)
best_n = n
optimal_k = c()
df = data.frame()
# second approach iterations over different k
for (i in 1:iterations){
print(i)
sample <- rbinom(n,1,ratio)   # generate random samples
count = c()      # vector to contain all intermediate result
for(k in ks){
pieces = n/k     # calculate number of groups based on k
group = rep(1:pieces,each=k) # factors for sample split
sample_splits <- split(sample,group) # split sample
count = c(count, calculate_times(sample_splits,k))
}
local_best_n = min(count)
optimal_k <- c(optimal_k,ks[count==local_best_n])
df <- rbind(df,count)
}
optimal_k
head(df)
names(df) = ks
head(df)
names(df) <- ks
library(ggplot2)
center1 <- c(1,1)
center2 <- c(2,3)
center3 <- c(3,0)
fingerprint1 <- list(center1, center2, center3)
sd = 0.05
generate_point<- function(p){
new_x = rnorm(1,mean = p[1],sd = sd)
new_y = rnorm(1,mean = p[2],sd = sd)
return(c(new_x,new_y))
}
generate_group <- function(c,n=100,group_id){
i=1
df_p = data.frame()
while (i <=n){
new_point <- generate_point(c)
# g <- g+geom_point(data = as.data.frame(new_point), aes(x = new_point[1], y= new_point[2]))
df_p <- rbind(df_p,new_point)
i=i+1
}
df_p['id'] <- group_id
names(df_p) <- c('x','y')
return(df_p)
}
group1 <- generate_group(center1,group_id = 1)
group2 <- generate_group(center2,group_id = 2)
group3 <- generate_group(center3,group_id = 3)
groups <- rbind(group1,group2,group3)
names(groups) <- c('x','y','id')
groups$id = as.factor(groups$id)
g <- ggplot()+geom_point(aes(x = groups$x,y=groups$y,color=groups$id))
g
rgamma(n = 10,shape = 0.194,rate = 1/0.193)
# parameters for finger distribution
# all units are in mm
fp_shape = 0.193
fp_scale = 0.0591
fp_rate= 1/fp_scale
runif(1, min=-1)
sample(c(1,-1))
sample(c(1,-1),1)
sample(c(1,-1),1)
sample(c(1,-1),1)
sample(c(1,-1),1)
fp_shape = 0.193
fp_scale = 0.0591
fp_rate= 1/fp_scale
# functions
generate_point<- function(p,sd){
new_distance = rgamma(1,shape = fp_shape,rate = fp_shape)
x_dir = sample(c(-1,1),1)
y_dir = sample(c(-1,1),1)
new_x = p[1]+(x_dir)*1/sqrt(2)*new_distance
new_y = p[1]+(y_dir)*1/sqrt(2)*new_distance
#   new_x = rnorm(1,mean = p[1],sd = sd)
#   new_y = rnorm(1,mean = p[2],sd = sd)
return(c(new_x,new_y))
}
generate_group <- function(c,n=iterations,group_id){
i=1
df_p = data.frame()
while (i <=n){
new_point <- generate_point(c,sd)
# g <- g+geom_point(data = as.data.frame(new_point), aes(x = new_point[1], y= new_point[2]))
df_p <- rbind(df_p,new_point)
i=i+1
}
df_p['id'] <- group_id
names(df_p) <- c('x','y')
return(df_p)
}
check_identity<-function(df1, df2, criteria){
for (i in nrow(df1)){
for (j in nrow(df2)){
if(i==j){
next    # i==j skip iteration
}
p1_i <- df1[i,]
p1_j <- df1[j,]
p2_i <- df2[i,]
p2_j <- df2[j,]
if(abs(calculate_p_distance(p1_i,p1_j) - calculate_p_distance(p2_i,p2_j))<criteria){
return(FALSE)
}
}
}
return(TRUE)
}
group1 <- generate_group(center1,group_id = 1)
group2 <- generate_group(center2,group_id = 2)
group3 <- generate_group(center3,group_id = 3)
groups <- rbind(group1,group2,group3)
names(groups) <- c('x','y','id')
groups$id = as.factor(groups$id)
g <- ggplot()+geom_point(aes(x = groups$x,y=groups$y,color=groups$id))
g
sin(Pi)
pi
sin(pi)
sin(30)
sin(0)
sin(1)
# functions
generate_point<- function(p,sd){
new_distance = rgamma(1,shape = fp_shape,rate = fp_shape)
angle = runif(1,0,2*pi)
new_x = p[1]+cos(angle)*new_distance
new_y = p[1]+sin(angle)*new_distance
#   new_x = rnorm(1,mean = p[1],sd = sd)
#   new_y = rnorm(1,mean = p[2],sd = sd)
return(c(new_x,new_y))
}
group1 <- generate_group(center1,group_id = 1)
group2 <- generate_group(center2,group_id = 2)
group3 <- generate_group(center3,group_id = 3)
groups <- rbind(group1,group2,group3)
names(groups) <- c('x','y','id')
groups$id = as.factor(groups$id)
g <- ggplot()+geom_point(aes(x = groups$x,y=groups$y,color=groups$id))
g
fp_shape = 0.00193
fp_scale = 0.0591
fp_rate= 1/fp_scale
group1 <- generate_group(center1,group_id = 1)
group2 <- generate_group(center2,group_id = 2)
group3 <- generate_group(center3,group_id = 3)
groups <- rbind(group1,group2,group3)
names(groups) <- c('x','y','id')
groups$id = as.factor(groups$id)
g <- ggplot()+geom_point(aes(x = groups$x,y=groups$y,color=groups$id))
g
# all units are in mm
fp_shape = 0.193
fp_scale = 0.0591
fp_rate= 1/fp_scale
group1 <- generate_group(center1,group_id = 1)
group2 <- generate_group(center2,group_id = 2)
group3 <- generate_group(center3,group_id = 3)
groups <- rbind(group1,group2,group3)
names(groups) <- c('x','y','id')
groups$id = as.factor(groups$id)
g <- ggplot()+geom_point(aes(x = groups$x,y=groups$y,color=groups$id))
g
rnorm(1,0,sd)
library(ggplot2)
center1 <- c(1,1)
center2 <- c(2,3)
center3 <- c(3,0)
fingerprint1 <- list(center1, center2, center3)
# parameters
sd = 0.05
iterations = 100
people_sd = 0.2
number_of_people = 10
# parameters for finger distribution
# all units are in mm
fp_shape = 0.193
fp_scale = 0.0591
fp_rate= 1/fp_scale
# functions
generate_point<- function(p,sd){
#   new_distance = rgamma(1,shape = fp_shape,rate = fp_shape)
#   angle = runif(1,0,2*pi)
#   new_x = p[1]+cos(angle)*new_distance
#   new_y = p[1]+sin(angle)*new_distance
angle = runif(1,0,2*pi)
new_dist = rnorm(1,mean = 0,sd = sd)
new_x = p[1] + sin(angle)*new_dist
new_y =  p[2] + cos(angle)*new_dist
return(c(new_x,new_y))
}
generate_group <- function(c,n=iterations,group_id){
i=1
df_p = data.frame()
while (i <=n){
new_point <- generate_point(c,sd)
# g <- g+geom_point(data = as.data.frame(new_point), aes(x = new_point[1], y= new_point[2]))
df_p <- rbind(df_p,new_point)
i=i+1
}
df_p['id'] <- group_id
names(df_p) <- c('x','y')
return(df_p)
}
check_identity<-function(df1, df2, criteria){
for (i in nrow(df1)){
for (j in nrow(df2)){
if(i==j){
next    # i==j skip iteration
}
p1_i <- df1[i,]
p1_j <- df1[j,]
p2_i <- df2[i,]
p2_j <- df2[j,]
if(abs(calculate_p_distance(p1_i,p1_j) - calculate_p_distance(p2_i,p2_j))<criteria){
return(FALSE)
}
}
}
return(TRUE)
}
calculate_p_distance <- function(p1,p2){
dist = sqrt((p1[1]^2-p2[1])^2+(p1[2]^2+p2[2]^2))
return(dist)
}
group1 <- generate_group(center1,group_id = 1)
group2 <- generate_group(center2,group_id = 2)
group3 <- generate_group(center3,group_id = 3)
groups <- rbind(group1,group2,group3)
names(groups) <- c('x','y','id')
groups$id = as.factor(groups$id)
g <- ggplot()+geom_point(aes(x = groups$x,y=groups$y,color=groups$id))
g
generate_center <- function(center){
new_distance = rgamma(1,shape = fp_shape,rate = fp_shape)
angle = runif(1,0,2*pi)
new_x = center[1] + cos(angle)*new_distance
new_y = center[2] + sin(angle)*new_distance
return(c(new_x,new_y))
}
center1
generate_center(center1)
generate_center(center2)
head(groups)
library(knitr)
setwd("~/Desktop/OneDrive/myGit/Statistics-Related/Optimization through Simulation")
knit("Portfolio Simulation.Rmd","README.md")
