install.packages("gsubfn")
library(ggmap)
library(rvest)
library(dplyr)
library(gsubfn)
gsub("\\"," ",df$Market)
help(fsub)
help(gsub)
gsub("\"," ",df$Market)
gsub("\\\\"," ",df$Market)
head(df)
row <- df[1:,]
row <- df[1,]
row
library(ggmap)
library(rvest)
library(dplyr)
library(gsubfn)
location_str <- paste(row$Market,row$City,row$Name)
geocode(location_str)
geo_locations <- data.frame()
for(i in 1:10){
row <- df[i,]
location_str <- paste(row$Market,row$City,row$Name)
geo<-geocode(location_str)
geo_locations<- rbind(geo_locations,geo)
}
geo_locations
usa_composite() %>%
subset(!(iso_3166_2 %in% c("AK", "HI"))) %>%
hush_tidy() -> usa
install.packages("map")
install.packages("maps")
install.packages("maps")
help(usa)
help(maps)
help("maps")
library(maps)
help(maps)
help("maps")
library(maps)
all_states <- map_data("state")
all_states
head(all_states)
map("usa")
map("state")
map("state")
map("state")
plot(geo_locations$lat,geo_locations$lon)
mapgilbert <- get_map(location = c(lon = mean(df$lon), lat = mean(df$lat)), zoom = 4,
maptype = "satellite", scale = 2)
library(ggmap)
library(ggplot2)
library(rvest)
library(dplyr)
library(maps)
mapgilbert <- get_map(location = c(lon = mean(df$lon), lat = mean(df$lat)), zoom = 4,
maptype = "satellite", scale = 2)
mapgilbert <- get_map(location = c(lon = mean(geo_locations$lon), lat = mean(geo_locations$lat)), zoom = 4,
maptype = "satellite", scale = 2)
ggmap(mapgilbert)
mapgilbert <- get_map(location = c(lon = mean(geo_locations$lon), lat = mean(geo_locations$lat)), zoom = 3,
maptype = "satellite", scale = 2)
ggmap(mapgilbert)
mapgilbert <- get_map(location = c(lon = mean(geo_locations$lon), lat = mean(geo_locations$lat)), zoom = 5,
maptype = "satellite", scale = 3)
ggmap(mapgilbert)
mapgilbert <- get_map(location = c(lon = mean(geo_locations$lon), lat = mean(geo_locations$lat)), zoom = 2,
maptype = "satellite", scale = 4)
ggmap(mapgilbert)
help("get_map")
mapgilbert <- get_map(location = c(lon = mean(geo_locations$lon), lat = mean(geo_locations$lat)), zoom = "auto",
maptype = "satellite", scale = 2)
ggmap(mapgilbert)
ggmap(mapgilbert)+geom_point(data = geo_locations, aes(x = lon, y = lat, fill = "red", alpha = 0.8), size = 5, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)
mapgilbert <- get_map(location = c(lon = mean(geo_locations$lon), lat = mean(geo_locations$lat)), zoom = 2,
maptype = "satellite", scale = 2)
ggmap(mapgilbert)+geom_point(data = geo_locations, aes(x = lon, y = lat, fill = "red", alpha = 0.8), size = 5, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)
ggmap(mapgilbert)+geom_point(data = geo_locations, aes(x = lon, y = lat, fill = "red", alpha = 0.8), size = 5, shape = 21) +guides(fill=FALSE, alpha=FALSE, size=FALSE)
help("geom_point")
ggmap(mapgilbert)+geom_point(data = geo_locations, aes(x = lon, y = lat, fill = "red", alpha = 0.8), size = 5, shape = 21))
ggmap(mapgilbert)+geom_point(data = geo_locations, aes(x = lon, y = lat, fill = "red", alpha = 0.8), size = 5, shape = 21)
ggmap(mapgilbert)+geom_point(data = geo_locations, aes(x = lon, y = lat, fill = "red"), size = 5, shape = 21)
ggmap(mapgilbert)+geom_point(data = geo_locations, aes(x = lon, y = lat, fill = "red"), size = 5)
install.packages("animation")
library(animation)
ggmap(mapgilbert)+geom_point(data = geo_locations, aes(x = lon, y = lat, fill = "red"), size = 5, shape = 21)+ggplot()
ggmap(mapgilbert)
mapgilbert <- get_map(location = c(lon = mean(geo_locations$lon), lat = mean(geo_locations$lat)), zoom = 2,
maptype = "satellite", scale = 2)
ggmap(mapgilbert)+geom_point(data = geo_locations, aes(x = lon, y = lat, fill = "red"), size = 5, shape = 21)
mapgilbert <- get_map(location = c(lon = mean(geo_locations$lon), lat = mean(geo_locations$lat)), zoom = 2,
maptype = "satellite", scale = 2)
ggmap(mapgilbert)
# html <- html(url)
#
# df <- html %>% html_nodes("table") %>% html_table()
# save(df,file = "starbucks_data.Rda")
load("starbucks_data.Rda")
df <- df[[1]]
colnames(df) <- df[1,]
df <- df[2:nrow(df),]
gsub("\\\\"," ",df$Market)
row <- df[1,]
geo_locations <- data.frame()
for(i in 1:10){
row <- df[i,]
location_str <- paste(row$Market,row$City,row$Name)
geo<-geocode(location_str)
geo_locations<- rbind(geo_locations,geo)
}
geo_locations
location_str <- paste(row$Market,row$City,row$Name)
geocode(location_str)
mapgilbert <- get_map(location = c(lon = mean(geo_locations$lon), lat = mean(geo_locations$lat)), zoom = 2,
maptype = "satellite", scale = 2)
ggmap(mapgilbert)
mapgilbert <- get_map(location = c(lon = mean(geo_locations$lon), lat = mean(geo_locations$lat)), zoom = 4,
maptype = "satellite", scale = 2)
ggmap(mapgilbert)
ggmap(mapgilbert)+geom_point(data = geo_locations, aes(x = lon, y = lat, fill = "red"), size = 5, shape = 21)
ggmap(mapgilbert)+geom_point(data = geo_locations, aes(x = lon, y = lat, fill = "red"), size = 5, shape = 21,alpha=0.8)
ggmap(mapgilbert)+geom_point(data = geo_locations, aes(x = lon, y = lat, fill = "red"), size = 3, shape = 21,alpha=0.8)
help("saveMovie")
mapgilbert <- get_map(location = c(lon = mean(geo_locations$lon), lat = mean(geo_locations$lat)), zoom = 4,
maptype = "satellite", scale = 2)
g<-ggmap(mapgilbert)
g<-g+geom_point(data = geo_locations, aes(x = lon, y = lat, fill = "red"), size = 3, shape = 21,alpha=0.8)
g
mapgilbert <- get_map(location = c(lon = 39.8282, lat = 98.5795), zoom = 4,
maptype = "satellite", scale = 2)
g<-ggmap(mapgilbert)
g<-g+geom_point(data = geo_locations, aes(x = lon, y = lat, fill = "red"), size = 3, shape = 21,alpha=0.8)
g
help("get_map")
mapgilbert <- get_map(location = c(lon = 39.8282, lat = 98.5795), zoom = 3,
maptype = "satellite", scale = 2)
g<-ggmap(mapgilbert)
g<-g+geom_point(data = geo_locations, aes(x = lon, y = lat, fill = "red"), size = 3, shape = 21,alpha=0.8)
g
mapgilbert <- get_map(location = c(lon = 98.5795, lat = 39.8282), zoom = 3,
maptype = "satellite", scale = 2)
g<-ggmap(mapgilbert)
g<-g+geom_point(data = geo_locations, aes(x = lon, y = lat, fill = "red"), size = 3, shape = 21,alpha=0.8)
g
mapgilbert <- get_map(location = c(lon = -98.5795, lat = 39.8282), zoom = 3,
maptype = "satellite", scale = 2)
g<-ggmap(mapgilbert)
g<-g+geom_point(data = geo_locations, aes(x = lon, y = lat, fill = "red"), size = 3, shape = 21,alpha=0.8)
g
mapgilbert <- get_map(location = c(lon = -98.5795, lat = 39.8282), zoom = 4,
maptype = "satellite", scale = 2)
g<-ggmap(mapgilbert)
g<-g+geom_point(data = geo_locations, aes(x = lon, y = lat, fill = "red"), size = 3, shape = 21,alpha=0.8)
g
mapgilbert <- get_map(location = c(lon = -98.5795, lat = 39.8282), zoom = 3.5,
maptype = "satellite", scale = 2)
g<-ggmap(mapgilbert)
g<-g+geom_point(data = geo_locations, aes(x = lon, y = lat, fill = "red"), size = 3, shape = 21,alpha=0.8)
g
mapgilbert <- get_map(location = c(lon = -98.5795, lat = 39.8282), zoom = 3,
maptype = "satellite", scale = 2)
g<-ggmap(mapgilbert)
g<-g+geom_point(data = geo_locations, aes(x = lon, y = lat, fill = "red"), size = 3, shape = 21,alpha=0.8)
g
g<-ggmap(mapgilbert)
# g<-g+geom_point(data = geo_locations, aes(x = lon, y = lat, fill = "red"), size = 3, shape = 21,alpha=0.8)
g
plotfoo<- function(){
for(i in 1:nrow(geo_locations)){
each_location <- geo_locations[i,]
g <- g+geom_point(each_location,aes(x = lon, y = lat, fill = "red"), size = 3, shape = 21,alpha=0.8)
print(g)
}
}
plotfoo()
plotfoo<- function(){
for(i in 1:nrow(geo_locations)){
each_location <- geo_locations[i,]
print(each_location)
g <- g+geom_point(each_location,aes(x = lon, y = lat, fill = "red"), size = 3, shape = 21,alpha=0.8)
print(g)
}
}
plotfoo()
plotfoo<- function(){
for(i in 1:nrow(geo_locations)){
each_location <- geo_locations[i,]
print(each_location)
g <- g+geom_point(data=each_location,aes(x = lon, y = lat, fill = "red"), size = 3, shape = 21,alpha=0.8)
print(g)
}
}
plotfoo()
help("saveMovie")
saveMovie(plotfoo(),interval = 0.1)
library(animation)
saveMovie(plotfoo(),interval = 0.1)
saveGIF(plotfoo(),interval = 0.1)
install.packages("ImageMagick")
install.ImageMagick()
install.packages("magick")
library(magick)
saveGIF(plotfoo(),interval = 0.1)
oopt = ani.options(interval = 1, nmax = nrow(geo_locations))
saveGIF(plotfoo(),interval = 0.1)
library(devtools)
dev_mode(on=T)
oopt = ani.options(interval = 1, nmax = nrow(geo_locations))
saveGIF(plotfoo(),interval = 0.1)
dev_mode(on=F)
require(installr)
install.packages("installr")
install.packages("installr")
as.Date(df$Opened)
head(df$Opened)
(df$Opened)
as.Date.date(df$Opened)
as.Date.dates(df$Opened)
as.Date(df$Opened,"%m-%d-%y")
df$Opened
as.Date(df$Opened,"%m/%d%y")
as.Date(df$Opened,"%m\/%d\%y")
head(df$Opened)
as.Date(df$Opened,"%m%d%y")
head(df$Opened)
as.Date(df$Opened,"%m//%d//%y")
head(df$Opened)
saveGIF(plotfoo(),interval = 0.1)
gsub('\\',"haha","haha\haha")
gsub('\\',"haha","haha\\haha")
gsub('\\',"haha","haha/\\haha")
as.Date(df$Opened)
help("as.Date")
as.Date(df$Opened,"%m/%d/%y")
df["date"] = as.Date(df$Opened,"%m/%d/%y")
help(order)
order(df$date)
df = df[order(df$date),]
help(df)
head(df)
tail(df)
load("starbucks_data.Rda")
df <- df[[1]]
colnames(df) <- df[1,]
df <- df[2:nrow(df),]
head(df)
df["date"] = as.Date(df$Opened,"%m/%d/%y")
head(df)
as.numeric(df$Opened)
gsub("\","",df$open)
;
)
)
dafs
return
print()
head(df)
library(ggmap)
library(ggplot2)
library(rvest)
library(dplyr)
library(maps)
library(animation)
library(magick)
oopt = ani.options(interval = 1, nmax = nrow(geo_locations))
saveGIF(plotfoo(),interval = 0.1)
oopt = ani.options(interval = 1, nmax = nrow(geo_locations))
saveGIF(plotfoo(),interval = 0.1)
load("geo_locations.Rda")
geo_locations = geo_locations[complete.cases(geo_locations), ]
mapgilbert <- get_map(location = c(lon = -98.5795, lat = 39.8282), zoom = 4,
maptype = "satellite", scale = 2)
g<-ggmap(mapgilbert)+ggtitle("Starbucks in US")+guides(fill=FALSE)
# g<-g+geom_point(data = geo_locations, aes(x = lon, y = lat, fill = "red"), size = 3, shape = 21,alpha=0.8)
g
plotfoo<- function(){
i=1
while(i<nrow(geo_locations)){
increment = ceiling(i/2)
if(increment>50){
increment=50
}
bound = i+increment
if(bound>nrow(geo_locations)){
bound = nrow(geo_locations)
}
each_location <- geo_locations[i:bound,]
print(i)
i=i+increment
g <- g+geom_point(data=each_location,aes(x = lon, y = lat, fill = "red"), size = 2, shape = 21,alpha=0.8)
print(g)
}
}
# oopt = ani.options(interval = 1, nmax = nrow(geo_locations))
saveGIF(plotfoo(),interval = 0.1,movie.name = "starbucks.gif")
library(ggmap)
library(ggplot2)
library(rvest)
library(dplyr)
library(maps)
library(animation)
library(stringr)
setwd("~/Desktop/OneDrive/myGit/Statistics-Projects/Starbucks Investigation")
geo_locations = geo_locations[complete.cases(geo_locations), ]
mapgilbert <- get_map(location = c(lon = -98.5795, lat = 39.8282), zoom = 4,
maptype = "satellite", scale = 2)
g<-ggmap(mapgilbert)+ggtitle("Starbucks in US")+guides(fill=FALSE)
# g<-g+geom_point(data = geo_locations, aes(x = lon, y = lat, fill = "red"), size = 3, shape = 21,alpha=0.8)
g
plotfoo<- function(){
i=1
while(i<nrow(geo_locations)){
increment = ceiling(i/2)
if(increment>50){
increment=50
}
bound = i+increment
if(bound>nrow(geo_locations)){
bound = nrow(geo_locations)
}
each_location <- geo_locations[i:bound,]
print(i)
i=i+increment
g <- g+geom_point(data=each_location,aes(x = lon, y = lat, fill = "red"), size = 2, shape = 21,alpha=0.8)
print(g)
}
}
# oopt = ani.options(interval = 1, nmax = nrow(geo_locations))
saveGIF(plotfoo(),interval = 0.1,movie.name = "starbucks.gif")
geo_locations = geo_locations[complete.cases(geo_locations), ]
mapgilbert <- get_map(location = c(lon = -98.5795, lat = 39.8282), zoom = 4,
maptype = "satellite", scale = 2)
g<-ggmap(mapgilbert)+ggtitle("Starbucks in US")+guides(fill=FALSE)
# g<-g+geom_point(data = geo_locations, aes(x = lon, y = lat, fill = "red"), size = 3, shape = 21,alpha=0.8)
g
plotfoo<- function(){
i=1
while(i<nrow(geo_locations)){
increment = ceiling(i/2)
if(increment>50){
increment=50
}
bound = i+increment
if(bound>nrow(geo_locations)){
bound = nrow(geo_locations)
}
each_location <- geo_locations[i:bound,]
print(i)
i=i+increment
g <- g+geom_point(data=each_location,aes(x = lon, y = lat, fill = "red"), size = 2, shape = 21,alpha=0.8)
print(g)
}
}
# oopt = ani.options(interval = 1, nmax = nrow(geo_locations))
saveGIF(plotfoo(),interval = 0.1,movie.name = "starbucks.gif")
library(stringr)
library(devtools)
library(rvest)
library(readr)
# Read Data
# Grab the data available from online.
url <- "http://sites.williams.edu/rdeveaux/files/2014/09/Saratoga.txt"
RealEstate.df <- read_delim(url, delim="\t", col_names=FALSE, skip=1)
colnames(RealEstate.df) <- readLines(url, n=1) %>%
str_replace_all('(\\")', "") %>%
str_split("[[:space:]]") %>%
unlist()
# Clean Data
# Change numeric variables to categorical descriptive variables.
RealEstate.df <- RealEstate.df %>%
mutate(Fuel.Type = factor(Fuel.Type,
labels=c("Gas", "Electric", "Oil")),
Sewer.Type = factor(Sewer.Type,
labels=c("None", "Private", "Public")),
Heat.Type = factor(Heat.Type,
labels=c("Hot Air", "Hot Water", "Electric")),
Waterfront = factor(Waterfront,
labels=c("No", "Yes")),
Central.Air = factor(Central.Air,
labels=c("No", "Yes")),
New.Construct = factor(New.Construct,
labels=c("No", "Yes")),
Fireplace.Present = factor(Fireplaces==0,
levels=c(FALSE, TRUE),
labels=c("Yes", "No")))
library(caret)
getModelInfo("lasso")
set.seed(123)
inTrain <- createDataPartition(y = RealEstate.df$Price,
p = 0.60,
list = FALSE,
groups = 10)
RealEstate.Train.df <- RealEstate.df %>%
slice(inTrain)
RealEstate.Test.df <- RealEstate.df %>%
slice(-inTrain)
help("getModelInfo")
getModelInfo(model='lasso')
getModelInfo(model='lasso fit')
getModelInfo(model='lassofit')
getModelInfo(model='lasso$fit')
getModelInfo(model='lasso')
names(getModelInfo(model='lasso$fit'))
names(getModelInfo(model='lasso'))
names(getModelInfo(model='lasso')$lasso)
names(getModelInfo(model='lasso')$lasso$parameters)
(getModelInfo(model='lasso')$lasso$parameters)
head(RealEstate.df)
names(RealEstate.df)
lasso_fit <- train(data=RealEstate.Train.df,Price~Lot.Size+Age+Lang.Value
+New.Construct+Living.Area+Pct.College+Bedrooms+Rooms)
lasso_fit <- train(data=RealEstate.Train.df,Price~Lot.Size+Age+Land.Value
+New.Construct+Living.Area+Pct.College+Bedrooms+Rooms)
lasso.cv <- trainControl(method="cv",
number=5)
lasso.tuning.grid <- expand.grid(lambda=seq(0.02, 1, 0.02))
lasso_fit <- train(data=RealEstate.Train.df,Price~Lot.Size+Age+Land.Value
+New.Construct+Living.Area+Pct.College+Bedrooms+Rooms,
method = 'lasso',trControl=lasso.cv,tuneGrid = lasso.tuning.grid
)
lasso.tuning.grid <- expand.grid(fraction=seq(0.02, 1, 0.02))
lasso_fit <- train(data=RealEstate.Train.df,Price~Lot.Size+Age+Land.Value
+New.Construct+Living.Area+Pct.College+Bedrooms+Rooms,
method = 'lasso',trControl=lasso.cv,tuneGrid = lasso.tuning.grid
)
lasso_fit$results
min(lasso_fit$results$RMSE)
min(lasso_fit$results$RMSE)^2
(min(lasso_fit$results$RMSE))^2
lasso_fit$finalModel
lasso_fit$finalModel$tuneValue
lasso_fit_best <- train(data=RealEstate.Train.df,Price~Lot.Size+Age+Land.Value
+New.Construct+Living.Area+Pct.College+Bedrooms+Rooms,
method = 'lasso',fraction=best_fraction
)
predict(lasso_fit,newdata = RealEstate.Train.df)
mse(predict(lasso_fit,newdata = RealEstate.Train.df))
mse
help(MSE)
help("mse")
help("MSE")
library(hydroGOF)
mse(predict(lasso_fit,newdata = RealEstate.Train.df))
mse(predict(lasso_fit,newdata = RealEstate.Train.df),RealEstate.Test.df$Price)
length(predict(lasso_fit,newdata = RealEstate.Train.df))
mse(predict(lasso_fit,newdata = RealEstate.Train.df),RealEstate.Train.df$Price)
best_fraction=lasso_fit$finalModel$tuneValue
best_fraction
lasso_fit$finalModel
lasso_fit
lasso.cv <- trainControl(method="cv",
number=10)
lasso.tuning.grid <- expand.grid(fraction=seq(0.02, 1, 0.02))
lasso_fit <- train(data=RealEstate.Train.df,Price~Lot.Size+Age+Land.Value
+New.Construct+Living.Area+Pct.College+Bedrooms+Rooms,
method = 'lasso',trControl=lasso.cv,tuneGrid = lasso.tuning.grid
)
best_fraction=lasso_fit$finalModel$tuneValue
best_fraction
1-0.02
lasso.tuning.grid
lasso_fit
RealEstate.Train.df[1,]
test_row = c(1, 132500, 0.09, No, 42, 50000, No, No,
1, Electric, Electric, Private, 906, 35, 2,
1, 1, 1, 5, Yes)
test_row = c(1, 132500, 0.09, 'No', 42, 50000, 'No', 'No',
1, 'Electric', 'Electric', 'Private', 906, 35, 2,
1, 1, 1, 5, 'Yes')
length(test_row)
ncol(RealEstate.Train.df)
set.seed(123)
inTrain <- createDataPartition(y = RealEstate.df$Price,
p = 0.60,
list = FALSE,
groups = 10)
RealEstate.Train.df <- RealEstate.df %>%
slice(inTrain)
RealEstate.Test.df <- RealEstate.df %>%
slice(-inTrain)
# EX3
lasso.cv <- trainControl(method="cv",
number=10)
lasso.tuning.grid <- expand.grid(fraction=seq(0.02, 1, 0.02))
lasso_fit <- train(data=RealEstate.Train.df,Price~Lot.Size+Age+Land.Value
+New.Construct+Living.Area+Pct.College+Bedrooms+Rooms,
method = 'lasso',trControl=lasso.cv,tuneGrid = lasso.tuning.grid
)
best_fraction=lasso_fit$finalModel$tuneValue
ncol(RealEstate.Train.df)
test_row = c( 132500, 0.09, 'No', 42, 50000, 'No', 'No',
'Electric', 'Electric', 'Private', 906, 35, 2,
1, 1, 5, 'Yes')
predict(lasso_fit,newdata = test_row)
df_test_realstate = data.frame(test_row)
df_test_realstate
df_test_realstate = rbind(data.frame(),test_row)
df_test_realstate
names(df_test_realstate) <- names(RealEstate.Test.df)
predict(lasso_fit,newdata = df_test_realstate)
df_test_realstate
str(df_test_realstate)
df_test_realstate = RealEstate.df[1,]
df_test_realstate
str(df_test_realstate)
df_test_realstate[1,]=test_row
str(df_test_realstate)
df_test_realstate = rbind(RealEstate.Train.df,test_row)
str(df_test_realstate)
